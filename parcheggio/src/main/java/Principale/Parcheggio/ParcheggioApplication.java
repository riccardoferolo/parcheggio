package Principale.Parcheggio;import Principale.Parcheggio.DTO.ReservationDTO;import Principale.Parcheggio.Models.Macchine;import Principale.Parcheggio.Models.ParkingSpot;import Principale.Parcheggio.Models.User;import java.sql.Time;import java.text.ParseException;import java.text.SimpleDateFormat;import java.time.LocalDate;import java.time.LocalTime;import java.time.format.DateTimeFormatter;import Principale.Parcheggio.Repository.MacchinaRepository;import Principale.Parcheggio.Repository.ParkingSpotRepository;import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import Principale.Parcheggio.Repository.UserRepository;import Principale.Parcheggio.Services.*;import Principale.Parcheggio.Services.ChargeRequestService;import org.springframework.context.ApplicationContext;import org.springframework.core.ParameterizedTypeReference;import org.springframework.http.*;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import org.springframework.web.client.RestTemplate;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;import java.util.*;import org.springframework.web.util.UriComponentsBuilder;import static java.lang.System.exit;@SpringBootApplicationpublic class ParcheggioApplication {	@Autowired	private ChargeRequestService cService;	@Autowired	private MacchineService macchineService;	Scanner s = new Scanner(System.in);	@Autowired	private UserRepository userRepository;	@Autowired	private ParkingSpotRepository parkingSpotRepository;	@Autowired	private MacchinaRepository MacchineRepository;	String targaScelta;	public static void main(String[] args) throws ParseException {		int scelta;		//SpringApplication.run(ParcheggioApplication.class, args);		Scanner sc = new Scanner(System.in);		// Avvia il contesto di Spring e ottieni un'istanza gestita di ParcheggioApplication		ApplicationContext context = SpringApplication.run(ParcheggioApplication.class, args);		// Ottieni l'istanza di ParcheggioApplication dal contesto di Spring		ParcheggioApplication app = context.getBean(ParcheggioApplication.class);		app.initializeParkingSpot();		do {			// Mostra il menu			System.out.println("MENU:");			System.out.println("1. Creare utente");			System.out.println("2. Login utente");			System.out.println("3. Cerca per username");			System.out.println("4. Entra Ora");			System.out.println("5. Prenota");			System.out.println("6. Creare una nuova macchina");			System.out.println("7. Cancellare una macchina");			System.out.println("8. Restituire tutte le macchine di un utente");			System.out.println("9. Restituire i dettagli di una macchina tramite targa");			System.out.println("10. cancella prenotazioni e basta");			System.out.println("11. cancella tutto");			System.out.println("12. Stampa la coda delle prenotazioni ordinate");			System.out.println("13. Aggiorna Saldo");			System.out.println("14. stampa occupazione parcheggio");			System.out.println("15. stampa pagamenti");			System.out.println("50. Esci");			System.out.print("Scegli un'opzione: ");			// Gestisci input dell'utente			while (!sc.hasNextInt()) {				System.out.println("Per favore, inserisci un numero valido.");				sc.next(); // Consuma l'input non valido			}			scelta = sc.nextInt();			sc.nextLine(); // Pulisce il buffer dopo nextInt()			String x;			switch (scelta) {				case 1:					x = app.registra();					System.out.println("Response from API: " + x);					break;				case 2:					x = app.login();					System.out.println("Response from API: " + x);					break;				case 3:					app.Cerca_User();					break;				case 4:					x = app.prenotaOra();					System.out.println("Response from API: " + x);					break;				case 5:					x = app.PrenotaPremium();					System.out.println("Response from API: " + x);					break;				case 6:					app.createMacchina("");					break;				case 7:					app.deleteMacchina();					break;				case 8:					app.getMacchineByUserId();					break;				case 9:					app.getMacchinaByTarga();					break;				case 10:					x = app.cancellaPrenotazioni();					System.out.println("Response from API: " + x);					break;				case 11:					x = app.Cancellatutto();					System.out.println("Response from API: " + x);					break;				case 12:					app.stampaCodaPrenotazioni();					break;				case 13:					x = app.aggiornaSaldo();					System.out.println("Response from API: " + x);					break;				case 14:					app.Occupazione();					break;				case 15:					app.stampaPagamenti();					break;				case 50:					System.out.println("arrivederci");					exit(0);					break;				default:					System.out.println("Errore: opzione non valida.");			}		} while (scelta != 50);		exit(0);	}	public void initializeParkingSpot() {		if (parkingSpotRepository.count() == 0) { // Controlla se la tabella è vuota			ParkingSpot parkingSpot = new ParkingSpot();			parkingSpot.setId(1); // ID predefinito			parkingSpot.setPosti_totali_ricarica(2);			parkingSpot.setPosti_totali_sosta(3);			parkingSpotRepository.save(parkingSpot);			System.out.println("Record aggiunto con id=1 e posti_totali=2");		} else {			System.out.println("Record già presente, nessuna operazione eseguita.");		}	}	public String registra() {		int errore = 0;		RestTemplate restTemplate = new RestTemplate();		String apiUrl = "http://localhost:8080/api/users/register";		Map<String, Object> requestBody = new HashMap<>();		String x = "";		do {			try {				errore = 0;				System.out.print("Inserisci un username: ");				requestBody.put("username", s.nextLine().trim());				System.out.print("Inserisci una password: ");				requestBody.put("password", s.nextLine().trim());				System.out.print("Inserisci un'email: ");				requestBody.put("email", s.nextLine().trim());				System.out.print("Inserisci un ruolo: ");				requestBody.put("ruolo", s.nextLine().trim().toUpperCase());				// Invio della richiesta POST				x = restTemplate.postForObject(apiUrl, requestBody, String.class);			} catch (Exception e) {				System.out.println("Errore durante la registrazione: " + e.getMessage());				errore = 1;			}		} while (errore == 1);		return x;	}	public String login() {		RestTemplate restTemplate = new RestTemplate();		String apiUrl = "http://localhost:8080/api/users/login";		Map<String, Object> requestBody = new HashMap<>();		System.out.println("Inserisci la email: ");		requestBody.put("email", s.next());		System.out.println("Inserisci la password: ");		requestBody.put("password", s.next());		try {			// Invio della richiesta POST e restituzione della risposta			return restTemplate.postForObject(apiUrl, requestBody, String.class);		} catch (Exception e) {			// Gestione degli errori del server			return "Errore durante il login: " + e.getMessage();		}	}	public void Cerca_User() {		// Creazione del RestTemplate		RestTemplate restTemplate = new RestTemplate();		// URL base dell'API		String apiUrl = "http://localhost:8080/api/users/username";		// Scanner per leggere l'input utente		Scanner scanner = new Scanner(System.in);		System.out.println("Inserisci Username: ");		String username = scanner.nextLine(); // Legge l'input		// Aggiunta del parametro di query all'URL		String urlWithQueryParam = apiUrl + "?username=" + username;		try {			// Esegue la richiesta GET			String response = restTemplate.getForObject(urlWithQueryParam, String.class);			// Stampa la risposta			System.out.println("Risultato API: " + response);		} catch (Exception e) {			System.out.println("Errore durante la chiamata all'API: " + e.getMessage());		}	}	public String prenotaOra() throws ParseException {		RestTemplate restTemplate = new RestTemplate();		String apiUrl = "http://localhost:8080/chargerequests/new";		Map<String, Object> requestBody = new HashMap<>();		String risposta;		do {			System.out.println("si vuole ricaricare la sua auto? (si o no):");			risposta = s.next().toLowerCase();			if (!risposta.equals("si") && !risposta.equals("no")) {				System.out.println("errore nell'inserimento della rispsota, riprovare!!!");				risposta = "";			} else if (risposta.equals("si")) {				System.out.println("Inserisci la percentuale iniziale: ");				int percentuale_inizio = s.nextInt();				s.nextLine(); // Consuma il carattere newline				System.out.println("Inserisci la percentuale richiesta: ");				int Percentage = s.nextInt();				s.nextLine(); // Consuma il carattere newline				System.out.println("Inserisci l'username per la macchina richiesta: ");				String username = s.next();				s.nextLine(); // Consuma il carattere newline				// Cerca l'utente				Optional<User> user = userRepository.findByUsername(username);				if (!user.isPresent()) {					return "Utente non trovato.";				}				// Cerca le auto dell'utente				List<Macchine> auto = cercaauto(user.get().getId(), "si");				if (auto.isEmpty()) {					System.out.println("Nessuna macchina associata all'utente.");					System.out.println("aggiungere una macchina?: (si o no) ");					String w = s.next().toLowerCase();					if (w.equals("si")) {						createMacchina(username);						auto = cercaauto(user.get().getId(), "si");					} else {						return "non puoi prenoare senza avere un'auto nel tuo account";					}				}				double kw = scegliAuto(auto);				String durataS = cService.calcola(percentuale_inizio, Percentage, kw);				SimpleDateFormat timeFormatter = new SimpleDateFormat("HH:mm:ss");				Time durata = new Time(timeFormatter.parse(durataS).getTime());				LocalDate data = LocalDate.now();				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");				String dataStr = data.format(formatter);				Time orario = Time.valueOf(LocalTime.now());				LocalTime OraFine = orario.toLocalTime().plusHours(durata.toLocalTime().getHour())						.plusMinutes(durata.toLocalTime().getMinute())						.plusSeconds(durata.toLocalTime().getSecond());				if (cService.isReservationAvailableRicarica(data, orario, Time.valueOf(OraFine))) {					requestBody.put("giorno", dataStr);					requestBody.put("Percentuale_iniziale", percentuale_inizio);					requestBody.put("Percentuale_richiesta", Percentage);					requestBody.put("ora", orario.toString());					requestBody.put("durata", durata.toString());					requestBody.put("oraFine", OraFine.toString());					requestBody.put("username", username);					requestBody.put("Targa", targaScelta);					requestBody.put("Ricarica", true);					try {						return restTemplate.postForObject(apiUrl, requestBody, String.class);					} catch (Exception e) {						return "Errore durante la prenotazione: " + e.getMessage();					}				} else {					return "PARCHEGGIO PIENO, RIPROVARE DOPO";				}			} else if (risposta.equals("no")) {				System.out.println("Inserisci l'username per la macchina richiesta: ");				String username = s.next();				s.nextLine(); // Consuma il carattere newline				// Cerca l'utente				Optional<User> user = userRepository.findByUsername(username);				if (!user.isPresent()) {					return "Utente non trovato.";				}				// Cerca le auto dell'utente				List<Macchine> auto = cercaauto(user.get().getId(), "");				if (auto.isEmpty()) {					System.out.println("Nessuna macchina associata all'utente.");					System.out.println("aggiungere una macchina?: (si o no) ");					String w = s.next().toLowerCase();					if (risposta.equals("si")) {						createMacchina(username);						auto = cercaauto(user.get().getId(), "");					} else {						return "non puoi prenoare senza avere un'auto nel tuo account";					}				}				double kw = scegliAuto(auto);				boolean valido = false;				Time durata = null;				do {					System.out.println("per quanto tempo desidera sostare:(formato hh:mm:ss)");					String durataS = s.next();					s.nextLine();					SimpleDateFormat timeFormatter = new SimpleDateFormat("HH:mm:ss");					try {						durata = new Time(timeFormatter.parse(durataS).getTime());						valido = true;					} catch (Exception e) {						valido = false;						System.out.println("Errore nel formato inserito riprovare");					}				} while (!valido);				LocalDate data = LocalDate.now();				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");				String dataStr = data.format(formatter);				Time orario = Time.valueOf(LocalTime.now());				LocalTime OraFine = orario.toLocalTime().plusHours(durata.toLocalTime().getHour())						.plusMinutes(durata.toLocalTime().getMinute())						.plusSeconds(durata.toLocalTime().getSecond());				if (cService.isReservationAvailable(data, orario, Time.valueOf(OraFine))) {					requestBody.put("giorno", dataStr);					requestBody.put("Percentuale_iniziale", null);					requestBody.put("Percentuale_richiesta", null);					requestBody.put("ora", orario.toString());					requestBody.put("durata", durata.toString());					requestBody.put("oraFine", OraFine.toString());					requestBody.put("username", username);					requestBody.put("Targa", targaScelta);					requestBody.put("Ricarica", null);					try {						return restTemplate.postForObject(apiUrl, requestBody, String.class);					} catch (Exception e) {						return "Errore durante la prenotazione: " + e.getMessage();					}				} else {					return "PARCHEGGIO PIENO, RIPROVARE DOPO";				}			}		} while (!risposta.matches("si") && !risposta.matches("no"));		return "prenotato";	}	public String PrenotaPremium() throws ParseException {		RestTemplate restTemplate = new RestTemplate();		String apiUrl = "http://localhost:8080/chargerequests/new";		Scanner scanner = new Scanner(System.in);		Map<String, Object> requestBody = new HashMap<>();		String risposta;		do {			System.out.println("si vuole ricaricare la sua auto? (si o no):");			risposta = s.next().toLowerCase();			if (!risposta.equals("si") && !risposta.equals("no")) {				System.out.println("errore nell'inserimento della rispsota, riprovare!!!");				risposta = "";			} else if (risposta.equals("si")) {				System.out.println("Inserisci la percentuale iniziale: ");				int percentuale_inizio = s.nextInt();				s.nextLine(); // Consuma il carattere newline				System.out.println("Inserisci la percentuale richiesta: ");				int Percentage = s.nextInt();				s.nextLine(); // Consuma il carattere newline				//questo poi sarà preso dal token direttamente !!!!!!!!!!!!!!!!!				System.out.println("Inserisci l'username per la macchina richiesta: ");				String username = s.next();				s.nextLine(); // Consuma il carattere newline				Optional<User> user = userRepository.findByUsername(username);				if (!user.isPresent()) {					return "Utente non trovato.";				}				// Cerca le auto dell'utente				List<Macchine> auto = cercaauto(user.get().getId(), "si");				if (auto.isEmpty()) {					System.out.println("Nessuna macchina associata all'utente.");					System.out.println("aggiungere una macchina?: (si o no) ");					String w = s.next().toLowerCase();					if (w.equals("si")) {						createMacchina(username);						auto = cercaauto(user.get().getId(), "si");					} else {						return "non puoi prenoare senza avere un'auto nel tuo account";					}				}				double kw = scegliAuto(auto);				String durataS = cService.calcola(percentuale_inizio, Percentage, kw);				SimpleDateFormat timeFormatter = new SimpleDateFormat("HH:mm:ss");				Time durata = new Time(timeFormatter.parse(durataS).getTime());				String dataStr;				LocalDate data = null;				String dataFormattata = "";				Boolean valido;				do {					System.out.println("Inserisci la data in questo formato (dd/MM/yyyy): ");					dataStr = scanner.nextLine();					DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");					LocalDate data2 = null;					// Parsing della stringa in LocalDate					try {						data2 = LocalDate.parse(dataStr, inputFormatter);						// Conversione della data in formato LocalDate (yyyy/MM/dd)						DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");						dataFormattata = data2.format(outputFormatter);						try {							data = LocalDate.parse(dataFormattata, outputFormatter);							valido = true;						} catch (Exception e) {							valido = false;							System.out.println("Errore: il formato della data è errato. Usa il formato dd/MM/yyyy.");						}					} catch (Exception e) {						valido = false;						System.out.println("Errore: il formato della data è errato. Usa il formato dd/MM/yyyy.");					}				} while (!valido);				Time orario = null;				valido = false;				do {					System.out.println("Inserisci l'orario di arrivo in questo formato (HH:mm:ss): ");					String orarioS = scanner.nextLine();					try {						orario = Time.valueOf(orarioS);						valido = true;					} catch (Exception e) {						valido = false;						System.out.println("Errore: il formato dell'orario è errato. Usa il formato HH:mm:ss.");					}				} while (!valido);				// Conversione a LocalTime per effettuare i calcoli				LocalTime localOraInizio = orario.toLocalTime();				LocalTime localDurata = durata.toLocalTime();				// Calcola oraFine				LocalTime orafine = localOraInizio.plusHours(localDurata.getHour())						.plusMinutes(localDurata.getMinute())						.plusSeconds(localDurata.getSecond());				// Assicurati che sia nel formato "HH:mm:ss"				DateTimeFormatter timeFormatter2 = DateTimeFormatter.ofPattern("HH:mm:ss");				String oraFineStr = orafine.format(timeFormatter2);				Time oraFine = new Time(timeFormatter.parse(oraFineStr).getTime());				if (cService.isReservationAvailableRicarica(data, orario, oraFine)) {					requestBody.put("giorno", dataFormattata); // Già una stringa					requestBody.put("Percentuale_iniziale", percentuale_inizio); // Integer va bene					requestBody.put("Percentuale_richiesta", Percentage); // Integer va bene					requestBody.put("ora", orario.toString()); // Converte in String					requestBody.put("durata", durata.toString()); // Converte in String					requestBody.put("oraFine", oraFine.toString()); // Converte in String					requestBody.put("username", username); // Già una stringa					requestBody.put("Targa", targaScelta);					requestBody.put("Ricarica", true);					try {						// Invio della richiesta POST e restituzione della risposta						return restTemplate.postForObject(apiUrl, requestBody, String.class);					} catch (Exception e) {						// Gestione degli errori del server						return "Errore durante il login: " + e.getMessage();					}				}				return "PARCHEGGIO PIENO, RIPROVARE DOPO";			} else if (risposta.equals("no")) {				//questo poi sarà preso dal token direttamente !!!!!!!!!!!!!!!!!				System.out.println("Inserisci l'username per la macchina richiesta: ");				String username = s.next();				s.nextLine(); // Consuma il carattere newline				Optional<User> user = userRepository.findByUsername(username);				if (!user.isPresent()) {					return "Utente non trovato.";				}				// Cerca le auto dell'utente				List<Macchine> auto = cercaauto(user.get().getId(), "");				if (auto.isEmpty()) {					System.out.println("Nessuna macchina associata all'utente.");					System.out.println("aggiungere una macchina?: (si o no) ");					String w = s.next().toLowerCase();					if (risposta.equals("si")) {						createMacchina(username);						auto = cercaauto(user.get().getId(), "");					} else {						return "non puoi prenoare senza avere un'auto nel tuo account";					}				}				double kw = scegliAuto(auto);				Boolean valido = false;				Time durata = null;				do {					System.out.println("quanto vuole restare?:(formato HH:MM:SS) ");					String durataS = s.next();					s.nextLine();					SimpleDateFormat timeFormatter = new SimpleDateFormat("HH:mm:ss");					try {						durata = new Time(timeFormatter.parse(durataS).getTime());						valido = true;					} catch (Exception e) {						System.out.println("errore nel formato della durata riprovare");						valido = false;					}				} while (valido == false);				String dataStr;				LocalDate data = null;				String dataFormattata = "";				valido = false;				do {					System.out.println("Inserisci la data in questo formato (dd/MM/yyyy): ");					dataStr = scanner.nextLine();					DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");					LocalDate data2 = null;					// Parsing della stringa in LocalDate					try {						data2 = LocalDate.parse(dataStr, inputFormatter);						// Conversione della data in formato LocalDate (yyyy/MM/dd)						DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");						dataFormattata = data2.format(outputFormatter);						try {							data = LocalDate.parse(dataFormattata, outputFormatter);							valido = true;						} catch (Exception e) {							valido = false;							System.out.println("Errore: il formato della data è errato. Usa il formato dd/MM/yyyy.");						}					} catch (Exception e) {						valido = false;						System.out.println("Errore: il formato della data è errato. Usa il formato dd/MM/yyyy.");					}				} while (valido == false);				Time orario = null;				valido = false;				SimpleDateFormat timeFormatter = new SimpleDateFormat("HH:mm:ss");				do {					System.out.println("Inserisci l'orario di arrivo in questo formato (HH:mm:ss): ");					String orarioS = scanner.nextLine();					try {						orario = Time.valueOf(orarioS);						valido = true;					} catch (Exception e) {						valido = false;						System.out.println("Errore: il formato dell'orario è errato. Usa il formato HH:mm:ss.");					}				} while (valido == false);				// Conversione a LocalTime per effettuare i calcoli				LocalTime localOraInizio = orario.toLocalTime();				LocalTime localDurata = durata.toLocalTime();				// Calcola oraFine				LocalTime orafine = localOraInizio.plusHours(localDurata.getHour())						.plusMinutes(localDurata.getMinute())						.plusSeconds(localDurata.getSecond());				// Assicurati che sia nel formato "HH:mm:ss"				DateTimeFormatter timeFormatter2 = DateTimeFormatter.ofPattern("HH:mm:ss");				String oraFineStr = orafine.format(timeFormatter2);				Time oraFine = new Time(timeFormatter.parse(oraFineStr).getTime());				if (cService.isReservationAvailable(data, orario, oraFine)) {					requestBody.put("giorno", dataFormattata); // Già una stringa					requestBody.put("Percentuale_iniziale", null); // Integer va bene					requestBody.put("Percentuale_richiesta", null); // Integer va bene					requestBody.put("ora", orario.toString()); // Converte in String					requestBody.put("durata", durata.toString()); // Converte in String					requestBody.put("oraFine", oraFine.toString()); // Converte in String					requestBody.put("username", username); // Già una stringa					requestBody.put("Targa", targaScelta);					requestBody.put("Ricarica", null);					try {						// Invio della richiesta POST e restituzione della risposta						return restTemplate.postForObject(apiUrl, requestBody, String.class);					} catch (Exception e) {						// Gestione degli errori del server						e.printStackTrace();						return "Errore durante il login: " + e.getMessage();					}				}				return "PARCHEGGIO PIENO, RIPROVARE DOPO";			}		} while (!risposta.matches("si") && !risposta.matches("no"));		return "prenotato";	}	public String Cancellatutto() {		RestTemplate restTemplate = new RestTemplate();		String Reservation_url = "http://localhost:8080/reservations/delete/all";		String payment_url = "http://localhost:8080/api/payments/delete-all";		String charge_url = "http://localhost:8080/chargerequests/delete-all";		String user_url = "http://localhost:8080/api/users/delete-all";		String Macchine_url = "http://localhost:8080/api/macchine/deleteALL";		String x = "";		try {			restTemplate.delete(Reservation_url);			restTemplate.delete(payment_url);			restTemplate.delete(charge_url);			restTemplate.delete(Macchine_url);			restTemplate.delete(user_url);			parkingSpotRepository.deleteAll();			parkingSpotRepository.resetAutoIncrement();			x = "eliminato tutto con successo.";		} catch (Exception e) {			System.err.println("Errore durante l'eliminazione della risorsa: " + e.getMessage());			e.printStackTrace();		}		return x;	}	private String cancellaPrenotazioni() {		RestTemplate restTemplate = new RestTemplate();		String Reservation_url = "http://localhost:8080/reservations/delete/all";		//String Reservation_reset = "http://localhost:8080/reservations/reset";		String payment_url = "http://localhost:8080/api/payments/delete-all";		String charge_url = "http://localhost:8080/chargerequests/delete-all";		String x = "";		try {			restTemplate.delete(Reservation_url);			//restTemplate.postForLocation(Reservation_reset,null);			restTemplate.delete(payment_url);			restTemplate.delete(charge_url);			x = "eliminato le prenotazioni, i pagamenti e  con successo";		} catch (Exception e) {			System.err.println("Errore durante l'eliminazione della risorsa: " + e.getMessage());			e.printStackTrace();		}		return x;	}	private List<Macchine> cercaauto(Integer id, String r) {		List<Macchine> auto = List.of();		if (r.matches("si")) {			auto = MacchineRepository.findAllByUserIdElettriche(id);		} else if (r.matches("")) {			auto = MacchineRepository.findByUserId(id);		}		return auto;	}	private double scegliAuto(List<Macchine> auto) {		if (auto == null || auto.isEmpty()) {			throw new IllegalArgumentException("La lista delle auto è vuota o nulla.");		}		Scanner s = new Scanner(System.in);		// Stampa le targhe disponibili		System.out.println("Scegli tra le seguenti targhe:");		for (Macchine macchina : auto) {			System.out.println("- " + macchina.getTarga());		}		while (true) {			// Leggi la targa inserita dall'utente			System.out.print("Inserisci la targa: ");			targaScelta = s.nextLine().trim().toUpperCase();			// Cerca la macchina corrispondente			for (Macchine macchina : auto) {				if (macchina.getTarga().equalsIgnoreCase(targaScelta)) {					// Restituisci i kW della macchina trovata					return macchina.getKwBatteria();				}			}			// Se la targa non è valida, chiedi di riprovare			System.out.println("Targa non trovata. Riprova.");		}	}	public void createMacchina(String usern) {		RestTemplate restTemplate = new RestTemplate();		Scanner scanner = new Scanner(System.in);		String targa;		do {			System.out.print("Inserisci la targa (rispettando gli standard italiani): ");			targa = scanner.nextLine().trim().toUpperCase();			if (macchineService.isValidTargaItaliana(targa)) {				System.out.println("Targa valida: " + targa);				break; // Esce dal ciclo se la targa è valida			} else {				System.out.println("Errore: La targa non rispetta gli standard italiani. Riprova.");			}		} while (true);		System.out.print("Inserisci i kW della batteria: (se non elettrica mettere 0)");		double kwBatteria = scanner.nextDouble();		scanner.nextLine(); // Consuma la newline		System.out.print("Inserisci il modello dell'auto: ");		String modello = scanner.nextLine();		String username;		if (usern.isEmpty()) {			System.out.print("Inserisci l'username dell'utente: ");			username = scanner.nextLine();		} else username = usern;		// Trova l'utente nel repository		User user = userRepository.findByUsername(username).orElseThrow(() -> new RuntimeException("Utente non trovato"));		int userId = user.getId();		// Configura i parametri della richiesta		MultiValueMap<String, String> params = new LinkedMultiValueMap<>();		params.add("targa", targa);		params.add("kwBatteria", String.valueOf(kwBatteria));		params.add("modello", modello);		params.add("userId", String.valueOf(userId));		// Configura le intestazioni HTTP		HttpHeaders headers = new HttpHeaders();		headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);		// Crea la richiesta HTTP		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<>(params, headers);		// URL dell'API		String url = "http://localhost:8080/api/macchine/create";		// Esegui la richiesta POST		ResponseEntity<Macchine> response = restTemplate.postForEntity(url, request, Macchine.class);		System.out.println("Macchina creata: " + response.getBody());	}	public void deleteMacchina() {		RestTemplate restTemplate = new RestTemplate();		Scanner scanner = new Scanner(System.in);		System.out.print("Inserisci la targa della macchina da cancellare: ");		String targa = scanner.nextLine();		String url = "http://localhost:8080/api/macchine/delete?targa=" + targa;		restTemplate.delete(url);		System.out.println("Macchina con targa " + targa + " cancellata.");	}	public void getMacchineByUserId() {		RestTemplate restTemplate = new RestTemplate();		Scanner scanner = new Scanner(System.in);		System.out.print("Inserisci l'username dell'utente: ");		String username = scanner.next();		// Base URL dell'API		String baseUrl = "http://localhost:8080/api/macchine/byUser";		// Costruzione dinamica dell'URL con query string		String url = UriComponentsBuilder.fromHttpUrl(baseUrl)				.queryParam("username", username)				.toUriString();		// Richiesta HTTP		ResponseEntity<List<Macchine>> response = restTemplate.exchange(				url, HttpMethod.GET, HttpEntity.EMPTY, new ParameterizedTypeReference<List<Macchine>>() {				}		);		List<Macchine> macchine = response.getBody();		if (macchine != null && !macchine.isEmpty()) {			System.out.println("Macchine associate all'utente con ID " + username + ":");			for (Macchine macchina : macchine) {				System.out.println(macchina);			}		} else {			System.out.println("Nessuna macchina trovata per l'utente con ID " + username);		}	}	public void getMacchinaByTarga() {		RestTemplate restTemplate = new RestTemplate();		Scanner scanner = new Scanner(System.in);		System.out.print("Inserisci la targa della macchina: ");		String targa = scanner.nextLine();		// Base URL dell'API		String baseUrl = "http://localhost:8080/api/macchine/byTarga";		// Costruzione dinamica dell'URL con query string		String url = UriComponentsBuilder.fromHttpUrl(baseUrl)				.queryParam("targa", targa)				.toUriString();		// Richiesta HTTP		ResponseEntity<Macchine> response = restTemplate.exchange(				url, HttpMethod.GET, HttpEntity.EMPTY, Macchine.class		);		if (response.getStatusCode().is2xxSuccessful()) {			Macchine macchina = response.getBody();			System.out.println("Dettagli della macchina con targa " + targa + ": " + macchina);		} else {			System.out.println("Macchina con targa " + targa + " non trovata.");		}	}	public void stampaCodaPrenotazioni() {		// Crea un nuovo RestTemplate con configurazione personalizzata		RestTemplate restTemplate = new RestTemplate();		// Configura Jackson per supportare i tipi Java Time		ObjectMapper mapper = new ObjectMapper();		mapper.registerModule(new JavaTimeModule());		mapper.registerModule(new ParameterNamesModule());		MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(mapper);		// Aggiungi il converter personalizzato al RestTemplate		restTemplate.getMessageConverters().add(0, converter);		String url = "http://localhost:8080/reservations/coda";		try {			// Esegui la richiesta GET e deserializza nel DTO			ResponseEntity<ReservationDTO[]> response = restTemplate.getForEntity(url, ReservationDTO[].class);			ReservationDTO[] reservations = response.getBody();			if (reservations != null && reservations.length > 0) {				System.out.println("Prenotazioni ordinate:");				for (ReservationDTO reservation : reservations) {					System.out.println("ID: " + reservation.getId()							+ ", User ID: " + reservation.getUserId()							+ ", Charge Request ID: " + reservation.getChargeRequestId()							+ ", Payment ID: " + reservation.getPaymentId()							+ ", Giorno: " + reservation.getDate()							+ ", Ora: " + reservation.getTime()							+ ", Durata: " + reservation.getDurata()							+ ", Targa: " + reservation.getTarga());				}			} else {				System.out.println("Nessuna prenotazione trovata.");			}		} catch (Exception e) {			e.printStackTrace();			System.out.println("Errore durante il recupero delle prenotazioni: " + e.getMessage());		}	}	public String aggiornaSaldo() {		RestTemplate restTemplate = new RestTemplate();		Map<String, Object> requestBody = new HashMap<>();		System.out.println("Inserisci l'username dell'utente di cui si vuole aggiornare il saldo: ");		String username = s.next();		s.nextLine(); // Consuma il carattere newline		Optional<User> user = userRepository.findByUsername(username);		if (user.get().getCarta_di_credito() == null || user.get().getCarta_di_credito().isEmpty()) {			String x;			boolean corretto;			do {				System.out.println("inserisci la carta di credito:");				x = s.next();				if (!isValidCreditCard(x)) {					System.out.println("numero di carta di credito invalido.");					corretto = false;				} else {					corretto = true;				}			} while (!corretto);			String risposta;			do {				System.out.println("si vuole salvare il metodo di pagamento nel proprio profilo? (si o no):");				risposta = s.next().toLowerCase();				if (risposta.matches("si")) {					String url = "http://localhost:8080/api/users/aggiorna-carta";					requestBody.put("carta", x);					requestBody.put("username", username);					try {						String l = restTemplate.exchange(url, HttpMethod.PUT, new HttpEntity<>(requestBody), String.class).getBody();						System.out.println(l);					} catch (Exception e) {						return "Errore durante l'aggiornameto della carta: " + e.getMessage();					}				} else if (risposta.matches("no")) {					System.out.println("carta usata solo questa volta e non salvata");				} else {					System.out.println("errore nell'inserimento della rispsota, riprovare!!!");				}			} while (!risposta.matches("si") && !risposta.matches("no"));		}		double saldo;		s.nextLine();		while (true) {			System.out.println("Inserisci il saldo: ");			String input = s.nextLine();			try {				saldo = Double.parseDouble(input); // Prova a convertire in double				if (saldo > 0) {					break; // Esci dal ciclo se il saldo è valido				} else {					System.out.println("Il saldo deve essere maggiore di 0. Riprova.");				}			} catch (NumberFormatException e) {				System.out.println("Input non valido. Inserisci un numero valido.");			}		}		System.out.println("Saldo inserito correttamente: " + saldo);		String url = "http://localhost:8080/api/users/aggiorna-saldo";		requestBody.clear();		requestBody.put("saldo", saldo);		requestBody.put("username", username);		try {			return restTemplate.exchange(url, HttpMethod.PUT, new HttpEntity<>(requestBody), String.class).getBody();		} catch (Exception e) {			return "Errore durante l'aggiornameto del saldo: " + e.getMessage();		}	}	public static boolean isValidCreditCard(String cardNumber) {		if (cardNumber == null || cardNumber.isEmpty()) {			return false;		}		// Rimuove eventuali spazi o trattini		cardNumber = cardNumber.replaceAll("\\s|-", "");		// Verifica che sia composto solo da cifre		if (!cardNumber.matches("\\d+")) {			return false;		}		// Algoritmo di Luhn		int sum = 0;		boolean alternate = false;		for (int i = cardNumber.length() - 1; i >= 0; i--) {			int n = Character.getNumericValue(cardNumber.charAt(i));			if (alternate) {				n *= 2;				if (n > 9) {					n -= 9;				}			}			sum += n;			alternate = !alternate;		}		// È valido se la somma è divisibile per 10		return sum % 10 == 0;	}	public void Occupazione() {		String url = "http://localhost:8080/reservations/occupazione";		RestTemplate restTemplate = new RestTemplate();		try {			// Richiama l'API e ottieni il messaggio			String message = restTemplate.getForObject(url, String.class);			// Stampa il messaggio			System.out.println(message);		} catch (Exception e) {			System.err.println("Errore durante la chiamata all'API: " + e.getMessage());		}	}	public void stampaPagamenti() {		RestTemplate restTemplate = new RestTemplate();		String url = "http://localhost:8080/api/payments/listaPagamenti";		while (true) {			try {				System.out.println("\nScegli il criterio di ricerca per i pagamenti:");				System.out.println("1. Tipo di prenotazione (ricarica/sosta)");				System.out.println("2. Ruolo dell'utente (base/premium)");				System.out.println("0. Torna al menu principale");				System.out.print("Inserisci la tua scelta: ");				int scelta = s.nextInt();				if (scelta == 0) {					System.out.println("Tornando al menu principale...");					return; // Esce dal menu e ritorna al main				}				Map<String, Object> params = new HashMap<>();				if (scelta == 1) {					while (true) {						System.out.print("Vuoi cercare pagamenti per ricarica (true) o sosta (false)? ");						String input = s.next();						if (input.equalsIgnoreCase("true") || input.equalsIgnoreCase("false")) {							params.put("ricarica", Boolean.parseBoolean(input));							break;						} else {							System.out.println("Input non valido. Inserisci 'true' o 'false'.");						}					}				} else if (scelta == 2) {					while (true) {						System.out.print("Vuoi cercare pagamenti per utenti base o premium? (BASE/PREMIUM): ");						String ruolo = s.next().toUpperCase();						if (ruolo.equals("BASE") || ruolo.equals("PREMIUM")) {							params.put("ruolo", ruolo);							break;						} else {							System.out.println("Input non valido. Inserisci 'BASE' o 'PREMIUM'.");						}					}				} else {					System.out.println("Scelta non valida. Riprova.");					continue;				}				HttpHeaders headers = new HttpHeaders();				HttpEntity<Map<String, Object>> requestEntity = new HttpEntity<>(params, headers);				// Chiamata all'API				ResponseEntity<List> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, List.class);				// Stampa tabellata direttamente				List<Map<String, Object>> payments = response.getBody();				if (payments == null || payments.isEmpty()) {					System.out.println("Nessun pagamento trovato.");				} else {					System.out.printf("%-10s %-10s %-15s %-10s %-10s %-15s%n", "ID", "Totale", "Utente", "Ruolo", "Tipo", "Targa");					System.out.println("-----------------------------------------------------------------------");					for (Map<String, Object> payment : payments) {						// Recupera i valori e sostituisci i null con "N/A"						String id = payment.get("id") != null ? payment.get("id").toString() : "N/A";						String totalAmount = payment.get("totalAmount") != null								? String.format("%.2f", Double.parseDouble(payment.get("totalAmount").toString()))								: "N/A";						String username = payment.get("user") != null && ((Map<String, Object>) payment.get("user")).get("username") != null								? ((Map<String, Object>) payment.get("user")).get("username").toString()								: "N/A";						String role = payment.get("user") != null && ((Map<String, Object>) payment.get("user")).get("ruolo") != null								? ((Map<String, Object>) payment.get("user")).get("ruolo").toString()								: "N/A";						String type = payment.get("chargeRequest") != null && ((Map<String, Object>) payment.get("chargeRequest")).get("ricarica") != null								? (((Boolean) ((Map<String, Object>) payment.get("chargeRequest")).get("ricarica")) ? "Ricarica" : "Sosta")								: "Sosta";						String targa = payment.get("chargeRequest") != null && ((Map<String, Object>) payment.get("chargeRequest")).get("targa") != null								? ((Map<String, Object>) payment.get("chargeRequest")).get("targa").toString()								: "N/A";						// Stampa i valori						System.out.printf("%-10s %-10s %-15s %-10s %-10s %-15s%n", id, totalAmount, username, role, type, targa);					}				}			} catch (Exception e) {				System.err.println("Errore durante la chiamata all'API: " + e.getMessage());			}		}	}}